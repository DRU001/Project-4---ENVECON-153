#+PROPERTY: header-args:python :results output raw  :noweb no-export :exports code

* USDA Nutrition DataBase

  The USDA maintains a database of nutritional information, where
  different kinds of food are identified by an NDB number.  They do
  not provide any data on prices.  

  To look up nutritional information, use api provided by the USDA at
  https://ndb.nal.usda.gov/ndb/doc/index.   You'll need to sign up for a
  free api key (see directions on page), then supply that key here:

#+begin_src python :session :tangle food_prices.py :results silent
  apikey = "inIyO1begWSRqsYtxS7m6p09PSyq7Qiw7fxzV2qN"
#+end_src

* Data on Prices

Here's an effort to describe some different kinds of food, along with
data on food prices.  This is all just based on my last trip to the
grocery store, except that I've used the USDA database to look up NDB
numbers.  Note that one may need to protect leading zeros with "" for
the NDB numbers.

Also note that some kinds of foods need to have unit weights (in
grams) supplied under "Units"; e.g., extra large eggs are taken to
each weigh 56g.  These conversions can also often be found on the USDA
NDB website.  Othertimes not---I still need to weigh a crumpet.

Food is purchased in particular units (gallons, pounds, grams).  And
in some cases the natural units are things like donuts or eggs, in
which case we may need to define our  own units (see the example of
"xl_egg" below).


#+name: food_prices
| Food                   | Quantity | Units   | Price | Date             | Location                  |      NDB |
|------------------------+----------+---------+-------+------------------+---------------------------+----------|
| Milk, 2% fat           |        1 | gallon  |  4.99 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45226447 |
| Eggs, extra large      |       12 | xl_egg  |  3.59 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45208918 |
| Crumpets               |        6 | crumpet |  3.19 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45324369 |
| Bananas                |        1 | pound   |  3.15 | [2019-09-14 Sat] | Monterey Market, Berkeley |  "09040" |
| Carrots, Organic       |        2 | pound   |  2.29 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11124 |
| Cauliflower            |     2.51 | pound   |  4.24 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11135 |
| Endive, Red            |     1.26 | pound   |  6.27 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11213 |
| Figs, black mission    |        1 | pound   |  4.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45170327 |
| Leeks, Organic         |        1 | pound   |  1.29 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11246 |
| Lettuce, Little Gem    |        1 | pound   |  5.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45276886 |
| Mushrooms, King Oyster |        1 | pound   |    12 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45218868 |
| Onion, yellow          |        1 | pound   |  0.39 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45339306 |
| Orange juice           |      0.5 | gallon  |  8.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45213207 |
| Parsnip                |        1 | pound   |  1.98 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11298 |
| Potato, marble mix     |        1 | pound   |  2.59 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45169597 |
| Rhubarb                |        1 | pound   |  1.84 | [2019-09-14 Sat] | Monterey Market, Berkeley |  "09307" |
| Potato, russet         |       10 | pound   |  2.98 | [2019-09-14 Sat] | Monterey Market, Berkeley | 45364251 |
| Squash, Zucchini       |        1 | pound   |  1.49 | [2019-09-14 Sat] | Monterey Market, Berkeley |    11477 |

#+begin_src python :var F=food_prices :colnames no :results silent :exports none
  from cfe.df_utils import orgtbl_to_df, df_to_orgtbl

  df = orgtbl_to_df(F,dtype=str)
  df.to_csv('./Data/ligons_shopping.csv')

#+end_src

And here's a little code to help look up NDB codes for foods of
different descriptions.

#+begin_src python :results output :session :tangle food_prices.py 
import ndb

ndb.ndb_search(apikey,"Great Value Buttermilk Pancakes")
#+end_src


* Nutritional information

Information on prices for different goods is found in a collection of
=csv= files in [[./Data/]].  You can generate additional files by using a
spreadsheet and exporting to the appropriate file format, then putting
that file in the [[./Data/]] directory.  These files should have the same
columns and format as the example above.  Then add them to the list
below.

#+begin_src python :session :tangle food_prices.py
CSVs = ["./Data/ligons_shopping.csv"]
#+end_src

#+results:

#+begin_src python :session :tangle food_prices.py
  import ndb
  import pandas as pd

  DFs = []
  for csv in CSVs:
    DFs.append(pd.read_csv(csv,dtype=str))

  df = pd.concat(DFs)
  # Some columns which ought to be numeric are actually str; convert them
  df['Price'] = df['Price'].astype(float)
  df['Quantity'] = df['Quantity'].astype(float)

  D = {}
  for food in  df.Food.tolist():
      D[food] = ndb.ndb_report(apikey,df.loc[df.Food==food,:].NDB).Quantity

  D = pd.DataFrame(D)

  print(D.T)

#+end_src


* Units & Prices

A function =ndb_units= in the [[file:ndb.py::from%20urllib.request%20import%20Request,%20urlopen][ndb]] module accomplishes this conversion
for many different units, using the =python= [[https://pint.readthedocs.io/en/latest/][pint module]].  A file
[[file:Data/food_units.txt][./Data/food_units.txt]] can be edited to deal with odd cases such as
donuts, using a format described in the =pint= [[https://pint.readthedocs.io/en/latest/defining.html][documentation]]. 

#+begin_src python :results output raw :session :tangle food_prices.py 
# Convert food quantities to NDB units
df['NDB Quantity'] = df[['Quantity','Units']].T.apply(lambda x : ndb.ndb_units(x['Quantity'],x['Units']))

# Now may want to filter df by time or place--need to get a unique set of food names.
df['NDB Price'] = df['Price']/df['NDB Quantity']

df.dropna(how='any') # Drop food with any missing data

# To use minimum price observed
Prices = df.groupby('Food')['NDB Price'].min()

print(Prices.head())
#+end_src


  
* Appendix =ndb=                                                   :noexport:
#+begin_src python :results output raw :tangle ndb.py
from urllib.request import Request, urlopen
import pandas as pd
import json
import warnings
from pint import UnitRegistry, UndefinedUnitError, DimensionalityError
ureg = UnitRegistry()
ureg.load_definitions('./Data/food_units.txt') 
import numpy as np

#%matplotlib inline

import requests

def ndb_search(apikey, term, url = 'https://api.nal.usda.gov/ndb/search'):
    """
    Search Nutrition DataBase, using apikey and string "term" as search criterion.

    Returns a pd.DataFrame of results.
    """
    parms = (('format', 'json'),('q', term),('api_key', apikey))
    r = requests.get(url, params = parms)
    if 'list' in r.json():
        l = r.json()['list']['item']
    else: 
        return []

    return pd.DataFrame(l)

def ndb_report(apikey, ndbno, url = 'https://api.nal.usda.gov/ndb/V2/reports'):
    """Construct a food report for food with given ndbno.  

    Nutrients are given per 100 g or 100 ml of the food.
    """
    params = (('ndbno', ndbno),('type', 'b'),('format', 'json'),('api_key', apikey))

    try:
        r = requests.get(url, params = params)
        L = r.json()['foods'][0]['food']['nutrients']
    except KeyError:
        warnings.warn("Couldn't find NDB=%s." % ndbno)
        return None

    v = {}
    u = {}
    for l in L:
        v[l['name']] = l['value']  # Quantity
        u[l['name']] = l['unit']  # Units

    #print(l)
    N = pd.DataFrame({'Quantity':v,'Units':u})

    return N

def ndb_units(q,u,ureg=ureg):
    """Convert quantity q of units u to 100g or 100ml."""
    try:
        x = ureg.Quantity(float(q),u)
    except UndefinedUnitError:
        return ureg.Quantity(np.NaN,'ml')

    try:
        return x.to(ureg.hectogram)
    except DimensionalityError:
        return x.to(ureg.deciliter)

#+end_src



